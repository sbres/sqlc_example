// Code generated by sqlc. DO NOT EDIT.
// source: user.sql

package sqlc

import (
	"context"
)

const checkUserExist = `-- name: CheckUserExist :one
SELECT Cast(count(1)::int as boolean) FROM users
WHERE email=$1
LIMIT 1
`

// CheckUserExist will check if the user exist, retuns true if the exists
func (q *Queries) CheckUserExist(ctx context.Context, email string) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkUserExist, email)
	var column_1 bool
	err := row.Scan(&column_1)
	return column_1, err
}

const createNewUser = `-- name: CreateNewUser :one
INSERT INTO users ("name", "email", "password")
VALUES (
    $1, $2, $3
)
RETURNING id
`

type CreateNewUserParams struct {
	Name     string `json:"name"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

// CreateNewUser will create a new user
func (q *Queries) CreateNewUser(ctx context.Context, arg CreateNewUserParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createNewUser, arg.Name, arg.Email, arg.Password)
	var id int32
	err := row.Scan(&id)
	return id, err
}
